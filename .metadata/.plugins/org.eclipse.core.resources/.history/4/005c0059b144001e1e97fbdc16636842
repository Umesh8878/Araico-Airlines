package com.AraicoAirlines;

import com.AraicoAirlines.dto.AdminDTO;
import com.AraicoAirlines.dto.Customer;
import com.AraicoAirlines.exceptions.NoRecordFoundException;
import com.AraicoAirlines.exceptions.SomethingWentWrongException;
import com.AraicoAirlines.services.AdminService;
import com.AraicoAirlines.services.FlightService;
import com.AraicoAirlines.services.*;
import com.AraicoAirlines.dao.AdminDAOImpl;
import com.AraicoAirlines.utility.DBUtils;
import com.AraicoAirlines.dto.Flight;
import com.AraicoAirlines.dao.*;
import com.AraicoAirlines.exceptions.*;
import com.AraicoAirlines.dto.*;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
	    try (Scanner scanner = new Scanner(System.in)) {
	        while (true) {
	            System.out.println("Welcome to Araico Airlines");
	            System.out.println("Select an option:");
	            System.out.println("1. Admin");
	            System.out.println("2. Customer");
	            System.out.print("Enter your choice: ");
	            int choice = scanner.nextInt();
	            scanner.nextLine();

	            if (choice == 1) {
	                adminSection(scanner);
	            } else if (choice == 2) {
	                customerSection(scanner);
	            } else {
	                System.out.println("Invalid choice");
	            }
	        }
	    } catch (Exception e) {
	        System.err.println("Error: " + e.getMessage());
	    } finally {
	        DBUtils.getEntityManager().close();
	    }
	}

/////////////////////////-------Admin Section----------////////////////////////////////////////
    private static void adminSection(Scanner scanner) {
        try {
        	while (true) {
	            System.out.println("Please select an option:");
	            System.out.println("1. New admin - signup first");
	            System.out.println("2. Already have an account - login please");
	            System.out.println("3. Go Back");
	            System.out.print("Enter your choice: ");
	            int choice = scanner.nextInt();
	            scanner.nextLine();
	
	            AdminDAOImpl adminDAO = new AdminDAOImpl();
	            AdminService adminService = new AdminService(adminDAO);
	
	            if (choice == 1) {
	                adminRegistration(scanner, adminService);
	            } else if (choice == 2) {
	                adminLogin(scanner, adminService);
	            }else if (choice == 3) {
	                return; 
	            }else {
	                System.out.println("Invalid choice");
	            }
        	}
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    private static void adminRegistration(Scanner scanner, AdminService adminService) {
        try {
            System.out.println("New Admin Registration");
            System.out.print("Enter admin username: ");
            String username = scanner.nextLine();

            System.out.print("Enter admin password: ");
            String password = scanner.nextLine();

            adminService.registerAdmin(username, password);
            System.out.println("Admin registered successfully!");

            System.out.print("Do you want to login now? (yes/no): ");
            String loginOption = scanner.nextLine().toLowerCase();

            if (loginOption.equals("yes")) {
                adminLogin(scanner, adminService);
            } else if (loginOption.equals("no")) {
                System.out.println("Thank you for registering!");
                System.out.print("Do you want to register another admin? (yes/no): ");
                String registerAnotherOption = scanner.nextLine().toLowerCase();
                
                if (registerAnotherOption.equals("yes")) {
                    adminRegistration(scanner, adminService);
                } else {
                    System.out.println("Goodbye!");
                }
            } else {
                System.out.println("Invalid choice");
            }
        } catch (SomethingWentWrongException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }


    private static void adminLogin(Scanner scanner, AdminService adminService) {
        try {
            System.out.println("Admin Login");
            System.out.print("Enter admin username: ");
            String username = scanner.nextLine();

            System.out.print("Enter admin password: ");
            String password = scanner.nextLine();

            AdminDTO admin = adminService.loginAdmin(username, password);
            if (admin != null) {
                System.out.println("Admin login successful!");
                System.out.println("Welcome to Araico Airlines "+username);
                
                FlightDAO flightDAO = new FlightDAOImpl(DBUtils.getConnection());
                FlightService flightService = new FlightService(flightDAO);
                
                while (true) {
                    System.out.println("Select an option:");
                    System.out.println("1. Add new flight");
                    System.out.println("2. Update flight information");
                    System.out.println("3. Remove flight");
                    System.out.println("4. Generate reports");
                    System.out.println("5. View All Flights details");
                    System.out.println("6. Log out");
                    System.out.print("Enter your choice: ");
                    int choice = scanner.nextInt();
                    scanner.nextLine();

                    switch (choice) {
                        case 1:
                            addFlight(scanner, flightService);
                            break;
                        case 2:
                            updateFlight(scanner, flightService);
                            break;
                        case 3:
                            removeFlight(scanner, flightService);
                            break;
                        case 4:
//                            generateReport();
                            break;
                        case 5:
                        	viewAllFlights(flightService);
                        	break;
                        case 6:
                            System.out.println("Logging out...");
                            return;
                        default:
                            System.out.println("Invalid choice");
                    }
                } 

            } else {
                System.out.println("Invalid admin credentials");
            }
        } catch (SomethingWentWrongException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }
    
////////////////////////////-------Flight Section------------//////////////////////////////////
    
    private static void addFlight(Scanner scanner, FlightService flightService) {
        System.out.println("Add New Flight");

        System.out.print("Enter flight number: ");
        String flightNumber = scanner.nextLine();

        System.out.print("Enter departure city: ");
        String departureCity = scanner.nextLine();

        System.out.print("Enter destination city: ");
        String destinationCity = scanner.nextLine();

        System.out.print("Enter departure date and time (YYYY-MM-DD HH:MM): ");
        String departureDateTimeString = scanner.nextLine();
        LocalDateTime departureDateTime = LocalDateTime.parse(departureDateTimeString, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"));

        System.out.print("Enter arrival date and time (YYYY-MM-DD HH:MM): ");
        String arrivalDateTimeString = scanner.nextLine();
        LocalDateTime arrivalDateTime = LocalDateTime.parse(arrivalDateTimeString, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"));

        System.out.print("Enter price: ");
        double price = scanner.nextDouble();
        scanner.nextLine();

        int seats = 100;
        
        Flight newFlight = new Flight(flightNumber, departureCity, destinationCity, departureDateTime, arrivalDateTime, price, seats);

        try {
            flightService.addFlight(newFlight);
            System.out.println("Flight added successfully!");
        } catch (SomethingWentWrongException e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
        }
    }


    private static void updateFlight(Scanner scanner, FlightService flightService) {
        System.out.println("Update Flight Information");
        
        System.out.print("Enter flight number: ");
        String flightNumber = scanner.nextLine();

        Flight existingFlight = fetchFlightDetailsFromDatabase(flightNumber, flightService);

        if (existingFlight == null) {
            System.out.println("Flight not found");
            return;
        }

        System.out.println("Enter new flight details:");

        System.out.print("Enter departure city: ");
        String departureCity = scanner.nextLine();
        existingFlight.setDepartureCity(departureCity);

        System.out.print("Enter destination city: ");
        String destinationCity = scanner.nextLine();
        existingFlight.setDestinationCity(destinationCity);

        System.out.print("Enter departure date and time (YYYY-MM-DD HH:MM): ");
        String departureDateTimeString = scanner.nextLine();
        LocalDateTime departureDateTime = LocalDateTime.parse(departureDateTimeString, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"));
        existingFlight.setDepartureTime(departureDateTime);

        System.out.print("Enter arrival date and time (YYYY-MM-DD HH:MM): ");
        String arrivalDateTimeString = scanner.nextLine();
        LocalDateTime arrivalDateTime = LocalDateTime.parse(arrivalDateTimeString, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"));
        existingFlight.setArrivalTime(arrivalDateTime);

        System.out.print("Enter price: ");
        double price = scanner.nextDouble();
        scanner.nextLine();
        existingFlight.setPrice(price);

        try {
            flightService.updateFlight(existingFlight);
            System.out.println("Flight information updated successfully!");
        } catch (SomethingWentWrongException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }
    
    private static Flight fetchFlightDetailsFromDatabase(String flightNumber, FlightService flightService) {
        return flightService.getFlightByNumber(flightNumber);
    }


    private static void removeFlight(Scanner scanner, FlightService flightService) {
        System.out.println("Remove Flight");
        
        System.out.print("Enter flight number: ");
        String flightNumber = scanner.nextLine();
        
        try {
            flightService.removeFlight(flightNumber);
            System.out.println("Flight removed successfully!");
        } catch (SomethingWentWrongException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    
    private static void viewAllFlights(FlightService flightService) {
        try {
            List<Flight> flights = flightService.getAllFlights();
            if (flights != null && !flights.isEmpty()) {
                System.out.println("List of all flights:");
                for (Flight flight : flights) {
                    System.out.println(flight);
                }
            } else {
                System.out.println("No flights found");
            }
        } catch (SomethingWentWrongException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

////////////////////////////--------Customer Section---------///////////////////////////////////
    private static void customerSection(Scanner scanner) {
    	try {
            System.out.println("Please select an option:");
            System.out.println("1. New customer - signup first");
            System.out.println("2. Already have an account - login please");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            CustomerDAOImpl customerDAO = new CustomerDAOImpl();
            CustomerService customerService = new CustomerService(customerDAO);

            if (choice == 1) {
                customerRegistration(scanner, customerService);
            } else if (choice == 2) {
                customerLogin(scanner, customerService);
            } else {
                System.out.println("Invalid choice");
            }
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }
    
    private static void customerRegistration(Scanner scanner, CustomerService customerService) {
        try {
            System.out.println("New Customer Registration");
            System.out.print("Enter customer name: ");
            String name = scanner.nextLine();

            System.out.print("Enter customer date of birth (YYYY-MM-DD): ");
            String dobString = scanner.nextLine();
            LocalDate dob = LocalDate.parse(dobString);

            System.out.print("Enter customer gender (MALE/FEMALE/OTHERS): ");
            String gender = scanner.nextLine().toUpperCase();

            if (!gender.equals("MALE") && !gender.equals("FEMALE") && !gender.equals("OTHERS")) {
                System.out.println("Invalid gender input");
                return;
            }

            System.out.print("Enter customer email: ");
            String email = scanner.nextLine();

            System.out.print("Enter customer mobile number: ");
            String mobileNumber = scanner.nextLine();

            System.out.print("Enter customer password: ");
            String password = scanner.nextLine();

            customerService.registerCustomer(name, dob, gender, email, mobileNumber, password);
            System.out.println("Customer registered successfully!");

            System.out.print("Do you want to login now? (yes/no): ");
            String loginOption = scanner.nextLine().toLowerCase();

            if (loginOption.equals("yes")) {
                customerLogin(scanner, customerService);
            } else if (loginOption.equals("no")) {
                System.out.println("Thank you for registering!");
            } else {
                System.out.println("Invalid choice");
            }
        } catch (SomethingWentWrongException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    private static void customerLogin(Scanner scanner, CustomerService customerService) {
        try {
            System.out.println("Customer Login");
            System.out.print("Enter customer email: ");
            String email = scanner.nextLine();

            System.out.print("Enter customer password: ");
            String password = scanner.nextLine();

            Customer customer = customerService.customerLogin(email, password);
            if (customer != null) {
                System.out.println("Customer login successful!");
                System.out.println("Welcome to Araico Airlines " + customer.getName());

                // Ask for preference
                while(true) {
	                System.out.println("Please select your preference:");
	                System.out.println("1. One way trip");
	                System.out.println("2. Round trip");
	                System.out.println("3. Book a trip");
	                System.out.println("4. Filter flights");
	                System.out.print("Enter your choice: ");
	                int preferenceChoice = scanner.nextInt();
	                scanner.nextLine();
	
	                FlightDAOImpl flightDAO = new FlightDAOImpl(DBUtils.getConnection());
	                FlightService flightService = new FlightService(flightDAO);
	                
	                switch (preferenceChoice) {
	                    case 1:
	                        oneWayTrip(scanner, flightService);
	                        break;
	                    case 2:
	                         roundTrip(scanner, flightService);
	                        break;
	                    case 3:
//	                    	bookTrip(scanner, flightService);
	                    	break;
	                    case 4:
	                    	filterFlights(scanner, flightService);
	                    	break;
	                    default:
	                        System.out.println("Invalid preference choice");
	                }
                }
            } else {
                System.out.println("Invalid customer credentials");
            }
        } catch (SomethingWentWrongException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }
    
    private static void oneWayTrip(Scanner scanner, FlightService flightService) {
        System.out.println("One-Way Trip");

        System.out.print("Enter departure city: ");
        String departureCity = scanner.nextLine();

        System.out.print("Enter destination city: ");
        String destinationCity = scanner.nextLine();

        System.out.print("Enter journey date (YYYY-MM-DD): ");
        String journeyDateString = scanner.nextLine();
        LocalDate journeyDate = LocalDate.parse(journeyDateString, DateTimeFormatter.ofPattern("yyyy-MM-dd"));

        System.out.print("Enter number of travelers: ");
        int numTravelers = scanner.nextInt();
        scanner.nextLine();

        try {
            List<Flight> availableFlights = flightService.getAvailableFlights(departureCity, destinationCity, journeyDate, numTravelers);
            
            if (!availableFlights.isEmpty()) {
                System.out.println("Available flights for your preferences:");
                for (Flight flight : availableFlights) {
                    System.out.println(flight);
                }
            } else {
                System.out.println("No available flights matching your preferences");
            }
        } catch (SomethingWentWrongException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }
    
    private static void roundTrip(Scanner scanner, FlightService flightService) {
        System.out.println("Round Trip");

        System.out.print("Enter departure city: ");
        String departureCity = scanner.nextLine();

        System.out.print("Enter destination city: ");
        String destinationCity = scanner.nextLine();

        System.out.print("Enter journey date (YYYY-MM-DD): ");
        String journeyDateString = scanner.nextLine();
        LocalDate journeyDate = LocalDate.parse(journeyDateString, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        
        System.out.print("Enter return date (YYYY-MM-DD): ");
        String returnDateString = scanner.nextLine();
        LocalDate returnDate = LocalDate.parse(journeyDateString, DateTimeFormatter.ofPattern("yyyy-MM-dd"));

        System.out.print("Enter number of travelers: ");
        int numTravelers = scanner.nextInt();
        scanner.nextLine();

        try {
            List<Flight> availableFlights = flightService.getAvailableFlights(departureCity, destinationCity, journeyDate, numTravelers);
            if (!availableFlights.isEmpty()) {
                System.out.println("Available flights for your preferences:");
                for (Flight flight : availableFlights) {
                    System.out.println(flight);
                }
            } else {
                System.out.println("No available flights matching your preferences");
            }
        } catch (SomethingWentWrongException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }
    
    private static void filterFlights(Scanner scanner, FlightService flightService) {
        try {
            while (true) {
                System.out.println("Filter Flights:");
                System.out.println("1. Filter by Departure City");
                System.out.println("2. Filter by Destination City");
                System.out.println("3. Filter by Departure Date");
                System.out.println("4. Filter by Destination Date");
                System.out.println("5. Filter by Price Range");
                System.out.println("6. Filter by All Conditions");
                System.out.println("7. Go Back");
                System.out.print("Enter your choice: ");
                int choice = scanner.nextInt();
                scanner.nextLine();

                switch (choice) {
                    case 1:
                         filterByDepartureCity(scanner, flightService);
                        break;
                    case 2:
                         filterByDestinationCity(scanner, flightService);
                        break;
                    case 3:
                         filterByDepartureDate(scanner, flightService);
                        break;
                    case 4:
                        // filterByDestinationDate();
                        break;
                    case 5:
                        // filterByPriceRange();
                        break;
                    case 6:
                        // filterByAll();
                        break;
                    case 7:
                        return; // Go back
                    default:
                        System.out.println("Invalid choice");
                }
            }
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    private static void filterByDepartureCity(Scanner scanner, FlightService flightService) {
        try {
            System.out.print("Enter departure city: ");
            String departureCity = scanner.nextLine();

            List<Flight> filteredFlights = flightService.filterFlightsByDepartureCity(departureCity);
            if (filteredFlights.isEmpty()) {
                System.out.println("No flights match the filtering criteria.");
            } else {
                System.out.println("Filtered Flights:");
                for (Flight flight : filteredFlights) {
                    System.out.println(flight);
                }
            }
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    private static void filterByDestinationCity(Scanner scanner, FlightService flightService) {
        try {
            System.out.print("Enter destination city: ");
            String destinationCity = scanner.nextLine();

            List<Flight> filteredFlights = flightService.filterFlightsByDestinationCity(destinationCity);
            if (filteredFlights.isEmpty()) {
                System.out.println("No flights match the filtering criteria.");
            } else {
                System.out.println("Filtered Flights:");
                for (Flight flight : filteredFlights) {
                    System.out.println(flight);
                }
            }
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }
    
    private static void filterByDepartureDate(Scanner scanner, FlightService flightService) {
        try {
            System.out.print("Enter departure date (yyyy-MM-dd): ");
            String departureDateStr = scanner.nextLine();

            LocalDate departureDate = LocalDate.parse(departureDateStr);
            List<Flight> filteredFlights = flightService.filterFlightsByDepartureDate(departureDate);

            if (filteredFlights.isEmpty()) {
                System.out.println("No flights match the filtering criteria.");
            } else {
                System.out.println("Filtered Flights:");
                for (Flight flight : filteredFlights) {
                    System.out.println(flight);
                }
            }
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

}
